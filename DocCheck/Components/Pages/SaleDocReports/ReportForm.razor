@using DocCheck.Application
@using DocCheck.Common
@using DocCheck.Data
@using DocCheck.Domain
@using Microsoft.AspNetCore.Components.QuickGrid
@using static DocCheck.Components.InputSelectMultiple<int>

@inject ProtectedSessionStorage ProtectedSessionStore
@inject ISaleDocReportService ReportService

<EditForm Model="ReportParamsModel" OnSubmit="BuildReport" FormName="ReportParamsForm">

	<div class="row">
		<div class="col-auto">
			<div class="row">
				<div class="col">
					<div class="input-group mb-3">
						<span class="input-group-text">С</span>
						<InputDate class="form-control" @bind-Value="ReportParamsModel!.DateBegin" />
						<span class="input-group-text">по</span>
						<InputDate class="form-control" @bind-Value="ReportParamsModel!.DateEnd" />
					</div>
				</div>
				<div class="col">
					<InputSelect class="form-select" @bind-Value="ReportParamsModel!.ManagerId">
						<option value="">Менеджер ...</option>
						@if (managers is not null)
						{
							foreach (var manager in managers)
							{
								<option value="@manager.Key">@manager.Value</option>
							}
						}
					</InputSelect>
				</div>
			</div>
			<div class="row">
				<div class="col">
					<div class="input-group mb-3">
						<span class="input-group-text">УПД</span>
						<InputText class="form-control" @bind-Value="ReportParamsModel!.SaleDocTerm" />
					</div>
				</div>
				<div class="col">
					<div class="input-group mb-3">
						<span class="input-group-text">Контрагент</span>
						<InputText class="form-control" @bind-Value="ReportParamsModel!.CustomerTerm" />
					</div>
				</div>
			</div>
		</div>
		<div class="col-auto">
			<InputSelectMultiple TItem="int"
								 Items="@(positions.Select(e => new SelectOption<int> { Value = e.Id, Text = e.Description }).ToList())"
								 SelectedValues="selectedPositions"
								 SelectedValuesChanged="PositionChanged" />
		</div>
		<div class="col-auto">
			<div class="row">
				<div class="col-auto">
					<button class="btn btn-primary" type="submit">Сформировать</button>
				</div>
				<div class="col-auto">
					<button class="btn btn-primary" type="button" @onclick="ClearReportParams">Очистить</button>
				</div>
				<div class="col-auto">
					<Export ReportParamsModel="ReportParamsModel" />
				</div>
			</div>
			<div class="col-auto">
				@if (NumResults != 0)
				{
					<div class="col-auto pt-2"><span>Найдено @NumResults</span></div>
				}
			</div>
			<div class="row">
			</div>
		</div>
	</div>
</EditForm>

@code {
	[SupplyParameterFromForm]
	private ReportParams ReportParamsModel { get; set; } = new();

	[Parameter]
	public int NumResults { get; set; }

	[Parameter]
	public EventCallback<ReportParams> OnBuildReport { get; set; }

	[Parameter]
	public EventCallback OnClearReportParams { get; set; }

	private Dictionary<string, string>? managers;
	private Position[] positions = Position.GetAll();
	private List<int> selectedPositions = [];

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			managers = ReportService.GetManagers();

			var storageResult = await ProtectedSessionStore.GetAsync<ReportParams>("reportParams");

			if (storageResult.Success && storageResult.Value is not null)
				ReportParamsModel = storageResult.Value;

			if (ReportParamsModel.PositionId is not null)
				selectedPositions = ReportParamsModel.PositionId;

			//StateHasChanged();

			await OnBuildReport.InvokeAsync(ReportParamsModel);
		}
	}

	private async Task BuildReport()
	{
		ReportParamsModel.PositionId = selectedPositions;

		await ProtectedSessionStore.SetAsync("reportParams", ReportParamsModel);

		await OnBuildReport.InvokeAsync(ReportParamsModel);
	}

	private async Task ClearReportParams()
	{
		ReportParamsModel = new();

		selectedPositions = [];

		await ProtectedSessionStore.DeleteAsync("reportParams");

		await OnClearReportParams.InvokeAsync();
	}

	private void PositionChanged(List<int> values)
	{
		selectedPositions = values;
	}
}