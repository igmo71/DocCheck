@page "/report"

@using DocCheck.Application
@using DocCheck.Common
@using DocCheck.Data
@using DocCheck.Domain
@using Microsoft.AspNetCore.Components.QuickGrid

@inject ISaleDocReportService ReportService

<ReportForm OnBuildReport="BuildReport" OnClearReportParams="ClearReportParams" NumResults="numResults" />

<div class="grid mt-3" tabindex="-1">
	<QuickGrid ItemsProvider="itemsProvider" Virtualize="true" @ref="grid" ItemKey="@(e => e.Id)" OverscanCount="40">
		<PropertyColumn Property="@(c => c.Position.Description)" Sortable="false" Title="Этап">
			<PlaceholderTemplate>
				<div class="spinner-grow" role="status">
					<span class="visually-hidden">Loading...</span>
				</div>
			</PlaceholderTemplate>
		</PropertyColumn>
		<PropertyColumn Property="@(c => c.Date)" Format="dd.MM.yyyy" Sortable="true" Title="Дата" />
		<TemplateColumn Sortable="true" Title="Номер" Context="context">
			<a href="saledoclogs?SaleDocId=@(context.Id)">@context.Number</a>
		</TemplateColumn>
		<TemplateColumn Sortable="false" Title="Менеджер/Контрагент" Context="context">
			<div>@context.ManagerName</div>
			<div>@context.CustomerName</div>
		</TemplateColumn>
		<TemplateColumn Context="context" Title="Перечень Ошибок" Class="text-wrap">
			<p class="lh-sm">
				@foreach (var error in context.PaperworkErrors.OrderBy(e => e.Type))
				{
					<div><small>- @error.Type.Description()</small></div>
				}
			</p>
		</TemplateColumn>
		<TemplateColumn Context="context" Title="Прочее">
			<div>
				@context.GetError(PaperworkErrorType.Other)?.Message
			</div>
		</TemplateColumn>
		<TemplateColumn Context="context" Title="Ошибка состава">
			<div>
				@context.GetError(PaperworkErrorType.QuantityError)?.Message
			</div>
		</TemplateColumn>
		<PropertyColumn Property="@(c => c.Redispatch)" Sortable="false" Title="Переотправок" />
	</QuickGrid>
</div>

@code {
	private ReportParams ReportParamsModel = new();

	private Position[] positions = Position.GetAll();

	private QuickGrid<SaleDoc>? grid;
	private GridItemsProvider<SaleDoc>? itemsProvider;
	private int numResults;



	protected override async Task OnInitializedAsync()
	{
		itemsProvider = DebouncedProvider;
	}

	private async ValueTask<GridItemsProviderResult<SaleDoc>> DebouncedProvider(GridItemsProviderRequest<SaleDoc> gridRequest)
	{
		var reportResult = ReportService.BuildReport(gridRequest, ReportParamsModel);

		if (reportResult.TotalItemCount != numResults && !gridRequest.CancellationToken.IsCancellationRequested)
		{
			numResults = reportResult.TotalItemCount;
		}

		return reportResult;
	}

	private async Task BuildReport(ReportParams reportParams)
	{
		ReportParamsModel = reportParams;

		if (grid is not null)
			await grid.RefreshDataAsync();
	}

	private async Task ClearReportParams()
	{
		ReportParamsModel = new();

		if (grid is not null)
			await grid.RefreshDataAsync();
	}	
}
